name: Build dd Static Binaries

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds - 主要架构
          - os: ubuntu-latest
            target: linux-amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            target: linux-386
            goos: linux
            goarch: 386
          - os: ubuntu-latest
            target: linux-arm64
            goos: linux
            goarch: arm64
          - os: ubuntu-latest
            target: linux-armv7
            goos: linux
            goarch: arm
            goarm: 7
            
          # Linux builds - 特殊架构
          - os: ubuntu-latest
            target: linux-riscv64
            goos: linux
            goarch: riscv64
          - os: ubuntu-latest
            target: linux-mips64
            goos: linux
            goarch: mips64
          - os: ubuntu-latest
            target: linux-mips64le
            goos: linux
            goarch: mips64le
          - os: ubuntu-latest
            target: linux-mips
            goos: linux
            goarch: mips
          - os: ubuntu-latest
            target: linux-mipsle
            goos: linux
            goarch: mipsle
          - os: ubuntu-latest
            target: linux-ppc64
            goos: linux
            goarch: ppc64
          - os: ubuntu-latest
            target: linux-ppc64le
            goos: linux
            goarch: ppc64le
            
          # macOS builds
          - os: macos-latest
            target: darwin-amd64
            goos: darwin
            goarch: amd64
          - os: macos-latest
            target: darwin-arm64
            goos: darwin
            goarch: arm64
      fail-fast: false  # 确保即使某个任务失败，其他任务仍然继续

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup coreutils build environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool gettext texinfo
          
          # 安装交叉编译工具链
          if [[ "${{ matrix.target }}" != "linux-amd64" ]]; then
            echo "Installing cross-compilation toolchains for ${{ matrix.target }}"
            
            if [[ "${{ matrix.target }}" == "linux-386" ]]; then
              sudo apt-get install -y gcc-multilib
            elif [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-armv7" ]]; then
              sudo apt-get install -y gcc-arm-linux-gnueabihf
            elif [[ "${{ matrix.target }}" == "linux-riscv64" ]]; then
              sudo apt-get install -y gcc-riscv64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-mips64" ]]; then
              sudo apt-get install -y gcc-mips64-linux-gnuabi64
            elif [[ "${{ matrix.target }}" == "linux-mips64le" ]]; then
              sudo apt-get install -y gcc-mips64el-linux-gnuabi64
            elif [[ "${{ matrix.target }}" == "linux-mips" ]]; then
              sudo apt-get install -y gcc-mips-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-mipsle" ]]; then
              sudo apt-get install -y gcc-mipsel-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-ppc64" ]]; then
              sudo apt-get install -y gcc-powerpc64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-ppc64le" ]]; then
              sudo apt-get install -y gcc-powerpc64le-linux-gnu
            fi
          fi

      - name: Setup coreutils build environment (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install autoconf automake libtool gettext texinfo
          brew link gettext --force

      - name: Download and extract coreutils source
        run: |
          curl -L -o coreutils.tar.gz https://ftp.gnu.org/gnu/coreutils/coreutils-8.32.tar.gz
          tar -xzf coreutils.tar.gz
          mv coreutils-8.32 coreutils-src
        shell: bash

      - name: Build dd static binary (Linux - amd64)
        if: matrix.target == 'linux-amd64'
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          ./configure
          sed -i "s/^LDFLAGS =/LDFLAGS = -static/g" ./Makefile
          make src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          src/dd --version | head -n1
        continue-on-error: true

      - name: Build dd static binary (Linux - 386)
        if: matrix.target == 'linux-386'
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          CFLAGS="-m32" LDFLAGS="-m32 -static" ./configure
          sed -i "s/^LDFLAGS = -m32/LDFLAGS = -m32 -static/g" ./Makefile
          make src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          src/dd --version | head -n1
        continue-on-error: true

      - name: Build dd static binary (Linux - ARM64)
        if: matrix.target == 'linux-arm64'
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          CC=aarch64-linux-gnu-gcc ./configure --host=aarch64-linux-gnu
          sed -i "s/^LDFLAGS =/LDFLAGS = -static/g" ./Makefile
          make src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          file src/dd
        continue-on-error: true

      - name: Build dd static binary (Linux - ARMv7)
        if: matrix.target == 'linux-armv7'
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          CC=arm-linux-gnueabihf-gcc ./configure --host=arm-linux-gnueabihf
          sed -i "s/^LDFLAGS =/LDFLAGS = -static/g" ./Makefile
          make src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}v${{ matrix.goarm }}
          file src/dd
        continue-on-error: true

      - name: Build dd static binary (Linux - Special Architectures)
        if: startsWith(matrix.target, 'linux-') && !contains(matrix.target, 'amd64') && !contains(matrix.target, '386') && !contains(matrix.target, 'arm')
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          
          # 选择合适的交叉编译器和主机类型
          if [[ "${{ matrix.target }}" == "linux-riscv64" ]]; then
            CROSS_CC=riscv64-linux-gnu-gcc
            HOST=riscv64-linux-gnu
          elif [[ "${{ matrix.target }}" == "linux-mips64" ]]; then
            CROSS_CC=mips64-linux-gnuabi64-gcc
            HOST=mips64-linux-gnuabi64
          elif [[ "${{ matrix.target }}" == "linux-mips64le" ]]; then
            CROSS_CC=mips64el-linux-gnuabi64-gcc
            HOST=mips64el-linux-gnuabi64
          elif [[ "${{ matrix.target }}" == "linux-mips" ]]; then
            CROSS_CC=mips-linux-gnu-gcc
            HOST=mips-linux-gnu
          elif [[ "${{ matrix.target }}" == "linux-mipsle" ]]; then
            CROSS_CC=mipsel-linux-gnu-gcc
            HOST=mipsel-linux-gnu
          elif [[ "${{ matrix.target }}" == "linux-ppc64" ]]; then
            CROSS_CC=powerpc64-linux-gnu-gcc
            HOST=powerpc64-linux-gnu
          elif [[ "${{ matrix.target }}" == "linux-ppc64le" ]]; then
            CROSS_CC=powerpc64le-linux-gnu-gcc
            HOST=powerpc64le-linux-gnu
          fi
          
          CC=${CROSS_CC} ./configure --host=${HOST}
          sed -i "s/^LDFLAGS =/LDFLAGS = -static/g" ./Makefile
          make src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          file src/dd
        continue-on-error: true

      - name: Build dd binary (macOS)
        if: startsWith(matrix.target, 'darwin-')
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          ./configure
          # macOS 不支持完全静态链接，使用标准编译
          make src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          src/dd --version | head -n1
        continue-on-error: true

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: dd-${{ matrix.target }}
          path: bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && 'v'}}${{ matrix.goarm }}
        continue-on-error: true

  collect:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Organize binaries
        run: |
          # 从所有单独的构建工件中复制文件到bin目录
          find artifacts/ -type f -not -path "*/bin-directory/*" -exec cp {} bin/ \;
          
          # 列出所有收集到的二进制文件
          echo "Successfully built binaries:"
          ls -la bin/
          
      - name: Upload combined bin directory
        uses: actions/upload-artifact@v4
        with:
          name: dd-binaries
          path: bin/
          
      - name: Commit binaries to repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add bin/
          git commit -m "fix: Update dd static binaries [skip ci]" || echo "No changes to commit"
          git push
        continue-on-error: true