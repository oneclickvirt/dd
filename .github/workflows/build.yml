name: Build and Package Coreutils

on:
  workflow_dispatch:
jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
        
      - name: 创建 bin 目录
        run: mkdir -p bin
        
      - name: 上传 bin 目录
        uses: actions/upload-artifact@v4
        with:
          name: bin-directory
          path: bin/

  build:
    needs: prepare
    strategy:
      matrix:
        include:
          # Linux 构建 - 主要架构
          - os: ubuntu-latest
            target: linux-amd64
            rust_target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: linux-386
            rust_target: i686-unknown-linux-musl
          - os: ubuntu-latest
            target: linux-arm64
            rust_target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: linux-armv7
            rust_target: armv7-unknown-linux-musleabihf
            
          # macOS 构建
          - os: macos-latest
            target: darwin-amd64
            rust_target: x86_64-apple-darwin
          - os: macos-latest
            target: darwin-arm64
            rust_target: aarch64-apple-darwin
            
          # Windows 构建
          - os: windows-latest
            target: windows-amd64
            rust_target: x86_64-pc-windows-gnu
            suffix: .exe
          - os: windows-latest
            target: windows-386
            rust_target: i686-pc-windows-gnu
            suffix: .exe
      fail-fast: false  # 确保即使某个任务失败，其他任务仍然继续

    runs-on: ${{ matrix.os }}
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4

      - name: 下载 bin 目录
        uses: actions/download-artifact@v4
        with:
          name: bin-directory
          path: bin/

      - name: 设置 Rust 环境
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.rust_target }}
          override: true

      - name: 安装交叉编译依赖 (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential musl-tools
          
          # 为特定目标架构安装交叉编译工具
          if [[ "${{ matrix.target }}" == "linux-386" ]]; then
            sudo apt-get install -y gcc-multilib
          elif [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [[ "${{ matrix.target }}" == "linux-armv7" ]]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf
          fi

      - name: 克隆 uutils/coreutils 仓库
        run: |
          git clone --depth 1 https://github.com/uutils/coreutils.git
        shell: bash

      - name: 构建静态二进制文件 (Linux)
        if: startsWith(matrix.target, 'linux-')
        run: |
          cd coreutils
          
          # 使用 MUSL 进行静态链接构建
          RUSTFLAGS='-C target-feature=+crt-static -C link-arg=-s' cargo build --target ${{ matrix.rust_target }} --release --no-default-features --features unix
          
          # 拷贝二进制文件并重命名
          cp target/${{ matrix.rust_target }}/release/coreutils ../bin/coreutils-${{ matrix.target }}${{ matrix.suffix }}
          
          # 验证是否为静态二进制
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "验证静态链接:"
            ldd ../bin/coreutils-${{ matrix.target }} || echo "完全静态链接 ✓"
            file ../bin/coreutils-${{ matrix.target }}
          fi
        shell: bash
        continue-on-error: true

      - name: 构建二进制文件 (macOS)
        if: startsWith(matrix.target, 'darwin-')
        run: |
          cd coreutils
          
          # macOS 构建，尽可能静态链接
          cargo build --target ${{ matrix.rust_target }} --release --no-default-features --features unix
          
          # 拷贝二进制文件并重命名
          cp target/${{ matrix.rust_target }}/release/coreutils ../bin/coreutils-${{ matrix.target }}
          
          # 显示依赖信息
          echo "二进制文件信息:"
          file ../bin/coreutils-${{ matrix.target }}
          otool -L ../bin/coreutils-${{ matrix.target }} || true
        shell: bash
        continue-on-error: true

      - name: 构建二进制文件 (Windows)
        if: startsWith(matrix.target, 'windows-')
        run: |
          cd coreutils
          
          # Windows 构建
          cargo build --target ${{ matrix.rust_target }} --release
          
          # 拷贝二进制文件并重命名
          cp target/${{ matrix.rust_target }}/release/coreutils.exe ../bin/coreutils-${{ matrix.target }}.exe
        shell: bash
        continue-on-error: true

      - name: 上传单个二进制文件
        uses: actions/upload-artifact@v4
        with:
          name: coreutils-${{ matrix.target }}
          path: bin/coreutils-${{ matrix.target }}${{ matrix.suffix }}
        continue-on-error: true

  collect:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
        
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: 整理二进制文件
        run: |
          mkdir -p bin/
          
          # 从所有单独的构建工件中复制文件到bin目录
          find artifacts/ -type f -not -path "*/bin-directory/*" -exec cp {} bin/ \;
          
          # 列出所有收集到的二进制文件
          echo "成功构建的二进制文件:"
          ls -la bin/
          chmod +x bin/*
          
      - name: 上传整合后的 bin 目录
        uses: actions/upload-artifact@v4
        with:
          name: coreutils-binaries
          path: bin/
          
      - name: 提交二进制文件到仓库
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          VERSION=$(cd artifacts/ && cd $(find . -name "coreutils-linux-amd64" -type f -exec dirname {} \; | head -n 1) && ./coreutils-linux-amd64 --version | head -n 1 | awk '{print $4}') || VERSION="未知版本"
          
          git add bin/
          git commit -m "fix: 更新 Coreutils 静态二进制文件 [$VERSION] [skip ci]" || echo "没有更改需要提交"
          git push
        continue-on-error: true