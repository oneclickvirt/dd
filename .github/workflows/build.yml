name: Build dd Static Binaries

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds - 主要架构
          - os: ubuntu-latest
            target: linux-amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            target: linux-386
            goos: linux
            goarch: 386
          - os: ubuntu-latest
            target: linux-arm64
            goos: linux
            goarch: arm64
          - os: ubuntu-latest
            target: linux-armv7
            goos: linux
            goarch: arm
            goarm: 7
            
          # Linux builds - 特殊架构
          - os: ubuntu-latest
            target: linux-riscv64
            goos: linux
            goarch: riscv64
          - os: ubuntu-latest
            target: linux-mips64
            goos: linux
            goarch: mips64
          - os: ubuntu-latest
            target: linux-mips64le
            goos: linux
            goarch: mips64le
          - os: ubuntu-latest
            target: linux-mips
            goos: linux
            goarch: mips
          - os: ubuntu-latest
            target: linux-mipsle
            goos: linux
            goarch: mipsle
          - os: ubuntu-latest
            target: linux-ppc64
            goos: linux
            goarch: ppc64
          - os: ubuntu-latest
            target: linux-ppc64le
            goos: linux
            goarch: ppc64le
            
          # macOS builds
          - os: macos-latest
            target: darwin-amd64
            goos: darwin
            goarch: amd64
          - os: macos-latest
            target: darwin-arm64
            goos: darwin
            goarch: arm64
      fail-fast: false  # 确保即使某个任务失败，其他任务仍然继续

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup coreutils build environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool gettext texinfo bison

          # 安装交叉编译工具链
          if [[ "${{ matrix.target }}" != "linux-amd64" ]]; then
            echo "Installing cross-compilation toolchains for ${{ matrix.target }}"
            
            if [[ "${{ matrix.target }}" == "linux-386" ]]; then
              sudo apt-get install -y gcc-multilib
            elif [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-armv7" ]]; then
              sudo apt-get install -y gcc-arm-linux-gnueabihf
            elif [[ "${{ matrix.target }}" == "linux-riscv64" ]]; then
              sudo apt-get install -y gcc-riscv64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-mips64" ]]; then
              sudo apt-get install -y gcc-mips64-linux-gnuabi64
            elif [[ "${{ matrix.target }}" == "linux-mips64le" ]]; then
              sudo apt-get install -y gcc-mips64el-linux-gnuabi64
            elif [[ "${{ matrix.target }}" == "linux-mips" ]]; then
              sudo apt-get install -y gcc-mips-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-mipsle" ]]; then
              sudo apt-get install -y gcc-mipsel-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-ppc64" ]]; then
              sudo apt-get install -y gcc-powerpc64-linux-gnu
            elif [[ "${{ matrix.target }}" == "linux-ppc64le" ]]; then
              sudo apt-get install -y gcc-powerpc64le-linux-gnu
            fi
          fi

      - name: Setup coreutils build environment (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install autoconf automake libtool gettext texinfo bison
          brew link gettext --force

      - name: Download and extract coreutils source
        run: |
          curl -L -o coreutils.tar.gz https://ftp.gnu.org/gnu/coreutils/coreutils-8.32.tar.gz
          tar -xzf coreutils.tar.gz
          mv coreutils-8.32 coreutils-src
        shell: bash

      - name: Apply patches for specific architectures
        run: |
          mkdir -p bin/
          
          # 修复 ARM64 和 RISCV64 上的 SYS_getdents 错误
          if [[ "${{ matrix.target }}" == "linux-arm64" || "${{ matrix.target }}" == "linux-riscv64" ]]; then
            echo "Applying SYS_getdents patch for ${{ matrix.target }}"
            cat > getdents_patch.txt << 'EOF'
          --- src/ls.c.orig	2023-01-01 00:00:00.000000000 +0000
          +++ src/ls.c	2023-01-01 00:00:00.000000000 +0000
          @@ -3023,7 +3023,11 @@
                 /* If we're not dereferenceing symlinks, try to use a more efficient
                    lookup by opening the parent and using readdir/fstatat. */
                 dirfd_needs_closing = true;
          +#ifdef SYS_getdents
                 if (syscall (SYS_getdents, dirfd (dirp), NULL, 0) == -1
          +#else
          +       if (syscall (SYS_getdents64, dirfd (dirp), NULL, 0) == -1
          +#endif
                     && errno == ENOENT)
                   {
                     /* Fall back on using regular stat.  */
          EOF
            patch -p0 coreutils-src/src/ls.c < getdents_patch.txt
          fi
          
          # 修复 macOS 的 noreturn 属性错误
          if [[ "${{ matrix.target }}" == "darwin-amd64" || "${{ matrix.target }}" == "darwin-arm64" ]]; then
            echo "Applying obstack patch for macOS"
            cat > obstack_patch.txt << 'EOF'
          --- lib/obstack.c.orig	2023-01-01 00:00:00.000000000 +0000
          +++ lib/obstack.c	2023-01-01 00:00:00.000000000 +0000
          @@ -348,7 +348,11 @@
          /* 调整这一段代码来避免属性不兼容的问题 */
          #if defined __GNUC__ || defined __IBM__ATTRIBUTES
          # define ATTRIBUTE_NORETURN __attribute__ ((__noreturn__))
          +# if defined __APPLE__
          +void (*obstack_alloc_failed_handler) (void) = (void (*)(void)) (void *) abort;
          +# else
          __attribute_noreturn__ void (*obstack_alloc_failed_handler) (void) = abort;
          +# endif
          #else
          void (*obstack_alloc_failed_handler) (void) = abort;
          #endif
          EOF
            patch -p0 coreutils-src/lib/obstack.c < obstack_patch.txt
          fi
        shell: bash

      - name: Build dd static binary (Linux - amd64)
        if: matrix.target == 'linux-amd64'
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          ./configure
          # 确保完整运行 make 以生成 configmake.h
          make
          # 修改 Makefile 添加静态链接
          sed -i "s/^LDFLAGS =/LDFLAGS = -static/g" ./Makefile
          # 重新编译 dd
          make src/dd
          strip src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          ls -lah src/dd
          file src/dd
        continue-on-error: true

      - name: Build dd static binary (Linux - 386)
        if: matrix.target == 'linux-386'
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          # 添加 TIME_T_32_BIT_OK=yes 来解决 time_t 问题
          TIME_T_32_BIT_OK=yes CFLAGS="-m32" LDFLAGS="-m32" ./configure
          # 确保完整运行 make 以生成 configmake.h
          make
          # 修改 Makefile 添加静态链接
          sed -i "s/^LDFLAGS = -m32/LDFLAGS = -m32 -static/g" ./Makefile
          # 重新编译 dd
          make src/dd
          strip src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          ls -lah src/dd
          file src/dd
        continue-on-error: true

      - name: Build dd static binary (Linux - ARM64)
        if: matrix.target == 'linux-arm64'
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          # 为 arm64 特别添加 -D_LARGEFILE64_SOURCE 来解决系统调用问题
          CC=aarch64-linux-gnu-gcc CFLAGS="-D_LARGEFILE64_SOURCE" ./configure --host=aarch64-linux-gnu
          # 确保完整运行 make 以生成 configmake.h
          make src/dd
          # 修改 Makefile 添加静态链接
          sed -i "s/^LDFLAGS =/LDFLAGS = -static/g" ./Makefile
          # 重新编译 dd
          make src/dd
          aarch64-linux-gnu-strip src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          ls -lah src/dd
          file src/dd
        continue-on-error: true

      - name: Build dd static binary (Linux - ARMv7)
        if: matrix.target == 'linux-armv7'
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          CC=arm-linux-gnueabihf-gcc ./configure --host=arm-linux-gnueabihf
          # 确保完整运行 make 以生成 configmake.h
          make
          # 修改 Makefile 添加静态链接
          sed -i "s/^LDFLAGS =/LDFLAGS = -static/g" ./Makefile
          # 重新编译 dd
          make src/dd
          arm-linux-gnueabihf-strip src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}v${{ matrix.goarm }}
          ls -lah src/dd
          file src/dd
        continue-on-error: true

      - name: Build dd static binary (Linux - Special Architectures)
        if: startsWith(matrix.target, 'linux-') && !contains(matrix.target, 'amd64') && !contains(matrix.target, '386') && !contains(matrix.target, 'arm')
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          
          # 选择合适的交叉编译器和主机类型
          if [[ "${{ matrix.target }}" == "linux-riscv64" ]]; then
            CROSS_CC=riscv64-linux-gnu-gcc
            HOST=riscv64-linux-gnu
            STRIP=riscv64-linux-gnu-strip
            # 添加 -D_LARGEFILE64_SOURCE 来解决 SYS_getdents 问题
            EXTRA_CFLAGS="-D_LARGEFILE64_SOURCE"
          elif [[ "${{ matrix.target }}" == "linux-mips64" ]]; then
            CROSS_CC=mips64-linux-gnuabi64-gcc
            HOST=mips64-linux-gnuabi64
            STRIP=mips64-linux-gnuabi64-strip
            EXTRA_CFLAGS=""
          elif [[ "${{ matrix.target }}" == "linux-mips64le" ]]; then
            CROSS_CC=mips64el-linux-gnuabi64-gcc
            HOST=mips64el-linux-gnuabi64
            STRIP=mips64el-linux-gnuabi64-strip
            EXTRA_CFLAGS=""
          elif [[ "${{ matrix.target }}" == "linux-mips" ]]; then
            CROSS_CC=mips-linux-gnu-gcc
            HOST=mips-linux-gnu
            STRIP=mips-linux-gnu-strip
            EXTRA_CFLAGS=""
          elif [[ "${{ matrix.target }}" == "linux-mipsle" ]]; then
            CROSS_CC=mipsel-linux-gnu-gcc
            HOST=mipsel-linux-gnu
            STRIP=mipsel-linux-gnu-strip
            EXTRA_CFLAGS=""
          elif [[ "${{ matrix.target }}" == "linux-ppc64" ]]; then
            CROSS_CC=powerpc64-linux-gnu-gcc
            HOST=powerpc64-linux-gnu
            STRIP=powerpc64-linux-gnu-strip
            EXTRA_CFLAGS=""
          elif [[ "${{ matrix.target }}" == "linux-ppc64le" ]]; then
            CROSS_CC=powerpc64le-linux-gnu-gcc
            HOST=powerpc64le-linux-gnu
            STRIP=powerpc64le-linux-gnu-strip
            EXTRA_CFLAGS=""
          fi
          
          # 添加额外的 CFLAGS
          if [ -n "$EXTRA_CFLAGS" ]; then
            CC=${CROSS_CC} CFLAGS="$EXTRA_CFLAGS" ./configure --host=${HOST}
          else
            CC=${CROSS_CC} ./configure --host=${HOST}
          fi
          
          # 对于 RISCV64，仅构建 dd 以避免 ls.c 错误
          if [[ "${{ matrix.target }}" == "linux-riscv64" ]]; then
            # 先运行足够的 make 以生成必要的头文件和依赖项
            make src/version.h lib/config.h
            make src/dd
          else
            # 对于其他架构，正常编译
            make
          fi
          
          # 修改 Makefile 添加静态链接
          sed -i "s/^LDFLAGS =/LDFLAGS = -static/g" ./Makefile
          # 重新编译 dd
          make src/dd
          ${STRIP} src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          ls -lah src/dd
          file src/dd
        continue-on-error: true

      - name: Build dd binary (macOS)
        if: startsWith(matrix.target, 'darwin-')
        run: |
          cd coreutils-src
          export FORCE_UNSAFE_CONFIGURE=1
          # 为 macOS 特别设置编译参数
          if [[ "${{ matrix.target }}" == "darwin-arm64" ]]; then
            # 对于 arm64，我们需要特殊处理交叉编译
            CFLAGS="-arch arm64" LDFLAGS="-arch arm64" ./configure
          else
            ./configure
          fi
          
          # 首先只编译指定目标，避免完整编译时的错误
          make src/version.h lib/config.h
          # 直接编译 dd，避免编译其他可能出错的部分
          make src/dd
          
          strip src/dd
          cp src/dd ../bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}
          ls -lah src/dd
          file src/dd
        continue-on-error: true

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: dd-${{ matrix.target }}
          path: bin/dd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && 'v'}}${{ matrix.goarm }}
        continue-on-error: true

  collect:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Organize binaries
        run: |
          # 确保bin目录存在
          mkdir -p bin/
          
          # 从所有单独的构建工件中复制文件到bin目录
          find artifacts/ -type f -not -path "*/bin-directory/*" -exec cp {} bin/ \;
          
          # 给所有二进制文件添加执行权限
          chmod +x bin/*
          
          # 列出所有收集到的二进制文件
          echo "Successfully built binaries:"
          ls -la bin/
          
      - name: Upload combined bin directory
        uses: actions/upload-artifact@v4
        with:
          name: dd-binaries
          path: bin/
          
      - name: Commit binaries to repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add bin/
          git commit -m "fix: Update dd static binaries [skip ci]" || echo "No changes to commit"
          git push
        continue-on-error: true